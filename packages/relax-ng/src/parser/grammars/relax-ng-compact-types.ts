// These types were autogenerated by peggy-to-ts
export type TopLevel = {
    type: "root";
    content: (
        | Decl[][number]
        | (GrammarContent | Pattern | Annotation)[][number]
    )[];
    comments: {
        type: "comment";
        content: string;
        position: {
            source: string | undefined;
            start: { offset: number; line: number; column: number };
            end: { offset: number; line: number; column: number };
        };
    }[];
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type Decl =
    | {
          type: "declaration";
          declarationType: "namespace";
          name: IdentifierOrKeyword;
          content: NamespaceURILiteral;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "declaration";
          declarationType: "defaultNamespace";
          name: IdentifierOrKeyword | null;
          content: NamespaceURILiteral;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "declaration";
          declarationType: "datatypes";
          name: IdentifierOrKeyword;
          content: Literal;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type Pattern =
    | {
          type: "group";
          content: AnnotatedPatternPrimary[];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "interleave";
          content: AnnotatedPatternPrimary[];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "choice";
          content: AnnotatedPatternPrimary[];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | AnnotatedPatternPrimary;
type AnnotatedPatternPrimary =
    | PatternSecondary
    | {
          type: "annotated";
          content: PatternSecondary;
          annotations: Annotations;
          followAnnotations: never[] | NonNullable<FollowAnnotations | null>;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type PatternSecondary =
    | {
          type: "repeat";
          operation: "?" | "*" | "+";
          content: PatternPrimary;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | PatternPrimary;
type PatternPrimary =
    | {
          type: "element";
          name: NameClass;
          content: Pattern;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "attribute";
          name: NameClass;
          content: Pattern;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "list";
          name: void;
          content: Pattern;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "mixed";
          name: void;
          content: Pattern;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "parentRef";
          name: Identifier;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "empty";
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "text";
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | Datatype
    | {
          type: "ref";
          name: Identifier;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "notAllowed";
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "external";
          content: AnyURILiteral;
          inherit: Inherit | null;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "grammar";
          content: GrammarContent[];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type Datatype =
    | {
          type: "datatype";
          name: DatatypeName | null;
          content: DatatypeValue;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "datatypeExcept";
          name: DatatypeName;
          params: never[] | NonNullable<Param[] | null>;
          except: ExceptPattern | null;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
export type Param =
    | ParamBase
    | {
          type: "annotated";
          content: ParamBase;
          annotations: Annotations;
          followAnnotations?: [];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type ParamBase = {
    type: "param";
    name: Name;
    value: Literal;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type ExceptPattern = {
    type: "except";
    content: Pattern;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type GrammarContent =
    | GrammarContentBase
    | {
          type: "annotated";
          content: GrammarContentBase;
          annotations: Annotations;
          followAnnotations?: [];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type GrammarContentBase =
    | Start
    | Define
    | {
          type: "div";
          content: GrammarContent[];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "include";
          uri: AnyURILiteral;
          inherit: Inherit | null;
          content: never[] | NonNullable<IncludeContent[] | null>;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | AnnotationElement;
type IncludeContent =
    | IncludeContentBase
    | {
          type: "annotated";
          content: IncludeContentBase;
          annotations: Annotations;
          followAnnotations?: [];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type IncludeContentBase =
    | Define
    | Start
    | {
          type: "div";
          content: IncludeContent[];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | AnnotationElement;
type Start = {
    type: "start";
    operation: AssignMethod;
    content: Pattern;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type Define = {
    type: "define";
    name: Identifier;
    operation: AssignMethod;
    content: Pattern;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type AssignMethod = "=" | "|=" | "&=";
export type NameClass = {
    type: "nameclassList";
    content: AnnotatedNameClass[];
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type AnnotatedNameClass =
    | NameClassPrimary
    | {
          type: "annotated";
          content: NameClassPrimary;
          annotations: Annotations;
          followAnnotations: never[] | NonNullable<FollowAnnotations | null>;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type NameClassPrimary =
    | NameClassPrimaryBase
    | {
          type: "annotated";
          content: NameClassPrimaryBase;
          annotations: Annotations;
          followAnnotations?: [];
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type NameClassPrimaryBase =
    | {
          type: "nameclassExcept";
          name: AnyName;
          except: ExceptNameClass | null;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "nameclassExcept";
          name: NsName;
          except: ExceptNameClass | null;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "nameclass";
          name: Name;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | NameClass;
type Name = CName | IdentifierOrKeyword;
type ExceptNameClass = NameClassPrimary;
type DatatypeName = CName | "string" | "token";
type DatatypeValue = Literal;
type AnyURILiteral = Literal;
type NamespaceURILiteral = Literal | "inherit";
type Inherit = IdentifierOrKeyword;
type IdentifierOrKeyword = Identifier | Keyword;
type Identifier = string;
type CName = string;
type NsName = string;
type AnyName = "*";
export type Literal = {
    type: "literal";
    parts: LiteralSegment[];
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type LiteralSegment =
    | {
          type: "literalSegment";
          escape: '"""';
          value: string;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "literalSegment";
          escape: "'''";
          value: string;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      }
    | {
          type: "literalSegment";
          escape: '"';
          value: string;
          position: {
              source: string | undefined;
              start: { offset: number; line: number; column: number };
              end: { offset: number; line: number; column: number };
          };
      };
type FollowAnnotations = (AnnotationElement extends (infer InnerArr)[]
    ? InnerArr
    : AnnotationElement)[];
type AnnotationAttributes = AnnotationAttribute[];
export type AnnotationAttribute = {
    type: "annotationAttribute";
    name: Name;
    value: Literal;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type AnnotationElement = {
    type: "annotationElement";
    name: Name;
    content: never[] | NonNullable<AnnotationContent[] | null>;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type Annotation = {
    type: "annotation";
    content: never[] | NonNullable<AnnotationContent[] | null>;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type AnnotationContent = AnnotationAttribute | AnnotationElement | Literal;
type Annotations = ((Documentation | Annotation)[] extends (infer InnerArr)[]
    ? InnerArr extends (infer InnerArr)[]
        ? InnerArr
        : InnerArr
    : (Documentation | Annotation)[])[];
type Documentation = DocumentationLine[];
export type DocumentationLine = {
    type: "documentationLine";
    content: string;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type Keyword =
    | "attribute"
    | "default"
    | "datatypes"
    | "div"
    | "element"
    | "empty"
    | "external"
    | "grammar"
    | "include"
    | "inherit"
    | "list"
    | "mixed"
    | "namespace"
    | "notAllowed"
    | "parent"
    | "start"
    | "string"
    | "text"
    | "token";
type Separator = WS | ["#", [string, string[]] | null];
type Newline = string[];
type _ = [Comment, _] | string[];
type WS = [Comment, _] | string[];
type Comment = {
    type: "comment";
    content: string;
    position: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
    };
};
type EOL = undefined;
type NCName = string;
type NCNameStartChar = string | [string, string];
type NCNameChar = NCNameStartChar | string;
type Char = string | [string, string];
